#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AIService.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AIService")]
	public partial class AIServiceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAsset(Asset instance);
    partial void UpdateAsset(Asset instance);
    partial void DeleteAsset(Asset instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertDrive(Drive instance);
    partial void UpdateDrive(Drive instance);
    partial void DeleteDrive(Drive instance);
    partial void InsertProcess(Process instance);
    partial void UpdateProcess(Process instance);
    partial void DeleteProcess(Process instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertTicketNote(TicketNote instance);
    partial void UpdateTicketNote(TicketNote instance);
    partial void DeleteTicketNote(TicketNote instance);
    #endregion
		
		public AIServiceDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AIServiceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AIServiceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AIServiceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AIServiceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AIServiceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Asset> Assets
		{
			get
			{
				return this.GetTable<Asset>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Drive> Drives
		{
			get
			{
				return this.GetTable<Drive>();
			}
		}
		
		public System.Data.Linq.Table<Process> Processes
		{
			get
			{
				return this.GetTable<Process>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<TicketNote> TicketNotes
		{
			get
			{
				return this.GetTable<TicketNote>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Asset")]
	public partial class Asset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _asset_id;
		
		private string _asset_name;
		
		private string _asset_ip;
		
		private string _asset_note;
		
		private string _asset_cpu;
		
		private int _asset_memory;
		
		private string _asset_os;
		
		private System.DateTime _asset_systemboottime;
		
		private System.DateTime _asset_lastscantime;
		
		private System.DateTime _asset_created;
		
		private int _user_id;
		
		private EntitySet<Drive> _Drives;
		
		private EntitySet<Process> _Processes;
		
		private EntitySet<Service> _Services;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onasset_idChanging(int value);
    partial void Onasset_idChanged();
    partial void Onasset_nameChanging(string value);
    partial void Onasset_nameChanged();
    partial void Onasset_ipChanging(string value);
    partial void Onasset_ipChanged();
    partial void Onasset_noteChanging(string value);
    partial void Onasset_noteChanged();
    partial void Onasset_cpuChanging(string value);
    partial void Onasset_cpuChanged();
    partial void Onasset_memoryChanging(int value);
    partial void Onasset_memoryChanged();
    partial void Onasset_osChanging(string value);
    partial void Onasset_osChanged();
    partial void Onasset_systemboottimeChanging(System.DateTime value);
    partial void Onasset_systemboottimeChanged();
    partial void Onasset_lastscantimeChanging(System.DateTime value);
    partial void Onasset_lastscantimeChanged();
    partial void Onasset_createdChanging(System.DateTime value);
    partial void Onasset_createdChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    #endregion
		
		public Asset()
		{
			this._Drives = new EntitySet<Drive>(new Action<Drive>(this.attach_Drives), new Action<Drive>(this.detach_Drives));
			this._Processes = new EntitySet<Process>(new Action<Process>(this.attach_Processes), new Action<Process>(this.detach_Processes));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int asset_id
		{
			get
			{
				return this._asset_id;
			}
			set
			{
				if ((this._asset_id != value))
				{
					this.Onasset_idChanging(value);
					this.SendPropertyChanging();
					this._asset_id = value;
					this.SendPropertyChanged("asset_id");
					this.Onasset_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string asset_name
		{
			get
			{
				return this._asset_name;
			}
			set
			{
				if ((this._asset_name != value))
				{
					this.Onasset_nameChanging(value);
					this.SendPropertyChanging();
					this._asset_name = value;
					this.SendPropertyChanged("asset_name");
					this.Onasset_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_ip", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string asset_ip
		{
			get
			{
				return this._asset_ip;
			}
			set
			{
				if ((this._asset_ip != value))
				{
					this.Onasset_ipChanging(value);
					this.SendPropertyChanging();
					this._asset_ip = value;
					this.SendPropertyChanged("asset_ip");
					this.Onasset_ipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_note", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string asset_note
		{
			get
			{
				return this._asset_note;
			}
			set
			{
				if ((this._asset_note != value))
				{
					this.Onasset_noteChanging(value);
					this.SendPropertyChanging();
					this._asset_note = value;
					this.SendPropertyChanged("asset_note");
					this.Onasset_noteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_cpu", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string asset_cpu
		{
			get
			{
				return this._asset_cpu;
			}
			set
			{
				if ((this._asset_cpu != value))
				{
					this.Onasset_cpuChanging(value);
					this.SendPropertyChanging();
					this._asset_cpu = value;
					this.SendPropertyChanged("asset_cpu");
					this.Onasset_cpuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_memory", DbType="Int NOT NULL")]
		public int asset_memory
		{
			get
			{
				return this._asset_memory;
			}
			set
			{
				if ((this._asset_memory != value))
				{
					this.Onasset_memoryChanging(value);
					this.SendPropertyChanging();
					this._asset_memory = value;
					this.SendPropertyChanged("asset_memory");
					this.Onasset_memoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_os", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string asset_os
		{
			get
			{
				return this._asset_os;
			}
			set
			{
				if ((this._asset_os != value))
				{
					this.Onasset_osChanging(value);
					this.SendPropertyChanging();
					this._asset_os = value;
					this.SendPropertyChanged("asset_os");
					this.Onasset_osChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_systemboottime", DbType="DateTime2 NOT NULL")]
		public System.DateTime asset_systemboottime
		{
			get
			{
				return this._asset_systemboottime;
			}
			set
			{
				if ((this._asset_systemboottime != value))
				{
					this.Onasset_systemboottimeChanging(value);
					this.SendPropertyChanging();
					this._asset_systemboottime = value;
					this.SendPropertyChanged("asset_systemboottime");
					this.Onasset_systemboottimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_lastscantime", DbType="DateTime2 NOT NULL")]
		public System.DateTime asset_lastscantime
		{
			get
			{
				return this._asset_lastscantime;
			}
			set
			{
				if ((this._asset_lastscantime != value))
				{
					this.Onasset_lastscantimeChanging(value);
					this.SendPropertyChanging();
					this._asset_lastscantime = value;
					this.SendPropertyChanged("asset_lastscantime");
					this.Onasset_lastscantimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_created", DbType="DateTime2 NOT NULL")]
		public System.DateTime asset_created
		{
			get
			{
				return this._asset_created;
			}
			set
			{
				if ((this._asset_created != value))
				{
					this.Onasset_createdChanging(value);
					this.SendPropertyChanging();
					this._asset_created = value;
					this.SendPropertyChanged("asset_created");
					this.Onasset_createdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Drive", Storage="_Drives", ThisKey="asset_id", OtherKey="asset_id")]
		public EntitySet<Drive> Drives
		{
			get
			{
				return this._Drives;
			}
			set
			{
				this._Drives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Process", Storage="_Processes", ThisKey="asset_id", OtherKey="asset_id")]
		public EntitySet<Process> Processes
		{
			get
			{
				return this._Processes;
			}
			set
			{
				this._Processes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Service", Storage="_Services", ThisKey="asset_id", OtherKey="asset_id")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Ticket", Storage="_Tickets", ThisKey="asset_id", OtherKey="asset_id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Asset", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drives(Drive entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_Drives(Drive entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_Processes(Process entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_Processes(Process entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _user_firstname;
		
		private string _user_email;
		
		private string _user_phone;
		
		private string _user_lastname;
		
		private bool _user_istechnician;
		
		private string _user_login;
		
		private string _user_password;
		
		private EntitySet<Asset> _Assets;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntitySet<Ticket> _Tickets1;
		
		private EntitySet<TicketNote> _TicketNotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onuser_firstnameChanging(string value);
    partial void Onuser_firstnameChanged();
    partial void Onuser_emailChanging(string value);
    partial void Onuser_emailChanged();
    partial void Onuser_phoneChanging(string value);
    partial void Onuser_phoneChanged();
    partial void Onuser_lastnameChanging(string value);
    partial void Onuser_lastnameChanged();
    partial void Onuser_istechnicianChanging(bool value);
    partial void Onuser_istechnicianChanged();
    partial void Onuser_loginChanging(string value);
    partial void Onuser_loginChanged();
    partial void Onuser_passwordChanging(string value);
    partial void Onuser_passwordChanged();
    #endregion
		
		public User()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Tickets1 = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets1), new Action<Ticket>(this.detach_Tickets1));
			this._TicketNotes = new EntitySet<TicketNote>(new Action<TicketNote>(this.attach_TicketNotes), new Action<TicketNote>(this.detach_TicketNotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_firstname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string user_firstname
		{
			get
			{
				return this._user_firstname;
			}
			set
			{
				if ((this._user_firstname != value))
				{
					this.Onuser_firstnameChanging(value);
					this.SendPropertyChanging();
					this._user_firstname = value;
					this.SendPropertyChanged("user_firstname");
					this.Onuser_firstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_email", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string user_email
		{
			get
			{
				return this._user_email;
			}
			set
			{
				if ((this._user_email != value))
				{
					this.Onuser_emailChanging(value);
					this.SendPropertyChanging();
					this._user_email = value;
					this.SendPropertyChanged("user_email");
					this.Onuser_emailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_phone", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string user_phone
		{
			get
			{
				return this._user_phone;
			}
			set
			{
				if ((this._user_phone != value))
				{
					this.Onuser_phoneChanging(value);
					this.SendPropertyChanging();
					this._user_phone = value;
					this.SendPropertyChanged("user_phone");
					this.Onuser_phoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_lastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string user_lastname
		{
			get
			{
				return this._user_lastname;
			}
			set
			{
				if ((this._user_lastname != value))
				{
					this.Onuser_lastnameChanging(value);
					this.SendPropertyChanging();
					this._user_lastname = value;
					this.SendPropertyChanged("user_lastname");
					this.Onuser_lastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_istechnician", DbType="Bit NOT NULL")]
		public bool user_istechnician
		{
			get
			{
				return this._user_istechnician;
			}
			set
			{
				if ((this._user_istechnician != value))
				{
					this.Onuser_istechnicianChanging(value);
					this.SendPropertyChanging();
					this._user_istechnician = value;
					this.SendPropertyChanged("user_istechnician");
					this.Onuser_istechnicianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_login", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string user_login
		{
			get
			{
				return this._user_login;
			}
			set
			{
				if ((this._user_login != value))
				{
					this.Onuser_loginChanging(value);
					this.SendPropertyChanging();
					this._user_login = value;
					this.SendPropertyChanged("user_login");
					this.Onuser_loginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_password", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string user_password
		{
			get
			{
				return this._user_password;
			}
			set
			{
				if ((this._user_password != value))
				{
					this.Onuser_passwordChanging(value);
					this.SendPropertyChanging();
					this._user_password = value;
					this.SendPropertyChanged("user_password");
					this.Onuser_passwordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Asset", Storage="_Assets", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ticket", Storage="_Tickets", ThisKey="user_id", OtherKey="customer_id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ticket1", Storage="_Tickets1", ThisKey="user_id", OtherKey="technician_id")]
		public EntitySet<Ticket> Tickets1
		{
			get
			{
				return this._Tickets1;
			}
			set
			{
				this._Tickets1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TicketNote", Storage="_TicketNotes", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<TicketNote> TicketNotes
		{
			get
			{
				return this._TicketNotes;
			}
			set
			{
				this._TicketNotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tickets1(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Tickets1(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_TicketNotes(TicketNote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TicketNotes(TicketNote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _category_id;
		
		private string _category_description;
		
		private EntitySet<Ticket> _Tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    partial void Oncategory_descriptionChanging(string value);
    partial void Oncategory_descriptionChanged();
    #endregion
		
		public Category()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string category_description
		{
			get
			{
				return this._category_description;
			}
			set
			{
				if ((this._category_description != value))
				{
					this.Oncategory_descriptionChanging(value);
					this.SendPropertyChanging();
					this._category_description = value;
					this.SendPropertyChanged("category_description");
					this.Oncategory_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Ticket", Storage="_Tickets", ThisKey="category_id", OtherKey="category_id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drive")]
	public partial class Drive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _drive_letter;
		
		private string _drive_drivename;
		
		private int _drive_totalsize;
		
		private int _drive_usedspace;
		
		private int _drive_deviceid;
		
		private int _drive_id;
		
		private System.DateTime _drive_timestamp;
		
		private bool _drive_isactive;
		
		private int _asset_id;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondrive_letterChanging(string value);
    partial void Ondrive_letterChanged();
    partial void Ondrive_drivenameChanging(string value);
    partial void Ondrive_drivenameChanged();
    partial void Ondrive_totalsizeChanging(int value);
    partial void Ondrive_totalsizeChanged();
    partial void Ondrive_usedspaceChanging(int value);
    partial void Ondrive_usedspaceChanged();
    partial void Ondrive_deviceidChanging(int value);
    partial void Ondrive_deviceidChanged();
    partial void Ondrive_idChanging(int value);
    partial void Ondrive_idChanged();
    partial void Ondrive_timestampChanging(System.DateTime value);
    partial void Ondrive_timestampChanged();
    partial void Ondrive_isactiveChanging(bool value);
    partial void Ondrive_isactiveChanged();
    partial void Onasset_idChanging(int value);
    partial void Onasset_idChanged();
    #endregion
		
		public Drive()
		{
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drive_letter", DbType="VarChar(2)")]
		public string drive_letter
		{
			get
			{
				return this._drive_letter;
			}
			set
			{
				if ((this._drive_letter != value))
				{
					this.Ondrive_letterChanging(value);
					this.SendPropertyChanging();
					this._drive_letter = value;
					this.SendPropertyChanged("drive_letter");
					this.Ondrive_letterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drive_drivename", DbType="VarChar(256)")]
		public string drive_drivename
		{
			get
			{
				return this._drive_drivename;
			}
			set
			{
				if ((this._drive_drivename != value))
				{
					this.Ondrive_drivenameChanging(value);
					this.SendPropertyChanging();
					this._drive_drivename = value;
					this.SendPropertyChanged("drive_drivename");
					this.Ondrive_drivenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drive_totalsize", DbType="Int NOT NULL")]
		public int drive_totalsize
		{
			get
			{
				return this._drive_totalsize;
			}
			set
			{
				if ((this._drive_totalsize != value))
				{
					this.Ondrive_totalsizeChanging(value);
					this.SendPropertyChanging();
					this._drive_totalsize = value;
					this.SendPropertyChanged("drive_totalsize");
					this.Ondrive_totalsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drive_usedspace", DbType="Int NOT NULL")]
		public int drive_usedspace
		{
			get
			{
				return this._drive_usedspace;
			}
			set
			{
				if ((this._drive_usedspace != value))
				{
					this.Ondrive_usedspaceChanging(value);
					this.SendPropertyChanging();
					this._drive_usedspace = value;
					this.SendPropertyChanged("drive_usedspace");
					this.Ondrive_usedspaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drive_deviceid", DbType="Int NOT NULL")]
		public int drive_deviceid
		{
			get
			{
				return this._drive_deviceid;
			}
			set
			{
				if ((this._drive_deviceid != value))
				{
					this.Ondrive_deviceidChanging(value);
					this.SendPropertyChanging();
					this._drive_deviceid = value;
					this.SendPropertyChanged("drive_deviceid");
					this.Ondrive_deviceidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drive_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int drive_id
		{
			get
			{
				return this._drive_id;
			}
			set
			{
				if ((this._drive_id != value))
				{
					this.Ondrive_idChanging(value);
					this.SendPropertyChanging();
					this._drive_id = value;
					this.SendPropertyChanged("drive_id");
					this.Ondrive_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drive_timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime drive_timestamp
		{
			get
			{
				return this._drive_timestamp;
			}
			set
			{
				if ((this._drive_timestamp != value))
				{
					this.Ondrive_timestampChanging(value);
					this.SendPropertyChanging();
					this._drive_timestamp = value;
					this.SendPropertyChanged("drive_timestamp");
					this.Ondrive_timestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drive_isactive", DbType="Bit NOT NULL")]
		public bool drive_isactive
		{
			get
			{
				return this._drive_isactive;
			}
			set
			{
				if ((this._drive_isactive != value))
				{
					this.Ondrive_isactiveChanging(value);
					this.SendPropertyChanging();
					this._drive_isactive = value;
					this.SendPropertyChanged("drive_isactive");
					this.Ondrive_isactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_id", DbType="Int NOT NULL")]
		public int asset_id
		{
			get
			{
				return this._asset_id;
			}
			set
			{
				if ((this._asset_id != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onasset_idChanging(value);
					this.SendPropertyChanging();
					this._asset_id = value;
					this.SendPropertyChanged("asset_id");
					this.Onasset_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Drive", Storage="_Asset", ThisKey="asset_id", OtherKey="asset_id", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.Drives.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.Drives.Add(this);
						this._asset_id = value.asset_id;
					}
					else
					{
						this._asset_id = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Process")]
	public partial class Process : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _process_id;
		
		private int _process_pid;
		
		private string _process_name;
		
		private string _process_executable;
		
		private System.DateTime _process_timestamp;
		
		private int _asset_id;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onprocess_idChanging(int value);
    partial void Onprocess_idChanged();
    partial void Onprocess_pidChanging(int value);
    partial void Onprocess_pidChanged();
    partial void Onprocess_nameChanging(string value);
    partial void Onprocess_nameChanged();
    partial void Onprocess_executableChanging(string value);
    partial void Onprocess_executableChanged();
    partial void Onprocess_timestampChanging(System.DateTime value);
    partial void Onprocess_timestampChanged();
    partial void Onasset_idChanging(int value);
    partial void Onasset_idChanged();
    #endregion
		
		public Process()
		{
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int process_id
		{
			get
			{
				return this._process_id;
			}
			set
			{
				if ((this._process_id != value))
				{
					this.Onprocess_idChanging(value);
					this.SendPropertyChanging();
					this._process_id = value;
					this.SendPropertyChanged("process_id");
					this.Onprocess_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_pid", DbType="Int NOT NULL")]
		public int process_pid
		{
			get
			{
				return this._process_pid;
			}
			set
			{
				if ((this._process_pid != value))
				{
					this.Onprocess_pidChanging(value);
					this.SendPropertyChanging();
					this._process_pid = value;
					this.SendPropertyChanged("process_pid");
					this.Onprocess_pidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string process_name
		{
			get
			{
				return this._process_name;
			}
			set
			{
				if ((this._process_name != value))
				{
					this.Onprocess_nameChanging(value);
					this.SendPropertyChanging();
					this._process_name = value;
					this.SendPropertyChanged("process_name");
					this.Onprocess_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_executable", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string process_executable
		{
			get
			{
				return this._process_executable;
			}
			set
			{
				if ((this._process_executable != value))
				{
					this.Onprocess_executableChanging(value);
					this.SendPropertyChanging();
					this._process_executable = value;
					this.SendPropertyChanged("process_executable");
					this.Onprocess_executableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime process_timestamp
		{
			get
			{
				return this._process_timestamp;
			}
			set
			{
				if ((this._process_timestamp != value))
				{
					this.Onprocess_timestampChanging(value);
					this.SendPropertyChanging();
					this._process_timestamp = value;
					this.SendPropertyChanged("process_timestamp");
					this.Onprocess_timestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_id", DbType="Int NOT NULL")]
		public int asset_id
		{
			get
			{
				return this._asset_id;
			}
			set
			{
				if ((this._asset_id != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onasset_idChanging(value);
					this.SendPropertyChanging();
					this._asset_id = value;
					this.SendPropertyChanged("asset_id");
					this.Onasset_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Process", Storage="_Asset", ThisKey="asset_id", OtherKey="asset_id", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.Processes.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.Processes.Add(this);
						this._asset_id = value.asset_id;
					}
					else
					{
						this._asset_id = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _service_id;
		
		private string _service_status;
		
		private System.DateTime _service_timestamp;
		
		private string _service_name;
		
		private string _service_displayname;
		
		private System.Nullable<int> _service_process_pid;
		
		private int _asset_id;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onservice_idChanging(int value);
    partial void Onservice_idChanged();
    partial void Onservice_statusChanging(string value);
    partial void Onservice_statusChanged();
    partial void Onservice_timestampChanging(System.DateTime value);
    partial void Onservice_timestampChanged();
    partial void Onservice_nameChanging(string value);
    partial void Onservice_nameChanged();
    partial void Onservice_displaynameChanging(string value);
    partial void Onservice_displaynameChanged();
    partial void Onservice_process_pidChanging(System.Nullable<int> value);
    partial void Onservice_process_pidChanged();
    partial void Onasset_idChanging(int value);
    partial void Onasset_idChanged();
    #endregion
		
		public Service()
		{
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int service_id
		{
			get
			{
				return this._service_id;
			}
			set
			{
				if ((this._service_id != value))
				{
					this.Onservice_idChanging(value);
					this.SendPropertyChanging();
					this._service_id = value;
					this.SendPropertyChanged("service_id");
					this.Onservice_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_status", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string service_status
		{
			get
			{
				return this._service_status;
			}
			set
			{
				if ((this._service_status != value))
				{
					this.Onservice_statusChanging(value);
					this.SendPropertyChanging();
					this._service_status = value;
					this.SendPropertyChanged("service_status");
					this.Onservice_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime service_timestamp
		{
			get
			{
				return this._service_timestamp;
			}
			set
			{
				if ((this._service_timestamp != value))
				{
					this.Onservice_timestampChanging(value);
					this.SendPropertyChanging();
					this._service_timestamp = value;
					this.SendPropertyChanged("service_timestamp");
					this.Onservice_timestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string service_name
		{
			get
			{
				return this._service_name;
			}
			set
			{
				if ((this._service_name != value))
				{
					this.Onservice_nameChanging(value);
					this.SendPropertyChanging();
					this._service_name = value;
					this.SendPropertyChanged("service_name");
					this.Onservice_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_displayname", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string service_displayname
		{
			get
			{
				return this._service_displayname;
			}
			set
			{
				if ((this._service_displayname != value))
				{
					this.Onservice_displaynameChanging(value);
					this.SendPropertyChanging();
					this._service_displayname = value;
					this.SendPropertyChanged("service_displayname");
					this.Onservice_displaynameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_process_pid", DbType="Int")]
		public System.Nullable<int> service_process_pid
		{
			get
			{
				return this._service_process_pid;
			}
			set
			{
				if ((this._service_process_pid != value))
				{
					this.Onservice_process_pidChanging(value);
					this.SendPropertyChanging();
					this._service_process_pid = value;
					this.SendPropertyChanged("service_process_pid");
					this.Onservice_process_pidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_id", DbType="Int NOT NULL")]
		public int asset_id
		{
			get
			{
				return this._asset_id;
			}
			set
			{
				if ((this._asset_id != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onasset_idChanging(value);
					this.SendPropertyChanging();
					this._asset_id = value;
					this.SendPropertyChanged("asset_id");
					this.Onasset_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Service", Storage="_Asset", ThisKey="asset_id", OtherKey="asset_id", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._asset_id = value.asset_id;
					}
					else
					{
						this._asset_id = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _status_description;
		
		private int _status_id;
		
		private EntitySet<Ticket> _Tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstatus_descriptionChanging(string value);
    partial void Onstatus_descriptionChanged();
    partial void Onstatus_idChanging(int value);
    partial void Onstatus_idChanged();
    #endregion
		
		public Status()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string status_description
		{
			get
			{
				return this._status_description;
			}
			set
			{
				if ((this._status_description != value))
				{
					this.Onstatus_descriptionChanging(value);
					this.SendPropertyChanging();
					this._status_description = value;
					this.SendPropertyChanged("status_description");
					this.Onstatus_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int status_id
		{
			get
			{
				return this._status_id;
			}
			set
			{
				if ((this._status_id != value))
				{
					this.Onstatus_idChanging(value);
					this.SendPropertyChanging();
					this._status_id = value;
					this.SendPropertyChanged("status_id");
					this.Onstatus_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Ticket", Storage="_Tickets", ThisKey="status_id", OtherKey="status_id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ticket_id;
		
		private System.DateTime _ticket_created;
		
		private string _ticket_description;
		
		private string _ticket_summary;
		
		private System.DateTime _ticket_updated;
		
		private System.DateTime _ticket_duedate;
		
		private System.Nullable<int> _asset_id;
		
		private int _status_id;
		
		private int _category_id;
		
		private System.Nullable<int> _technician_id;
		
		private System.Nullable<int> _customer_id;
		
		private bool _ticket_mlreviewed;
		
		private EntitySet<TicketNote> _TicketNotes;
		
		private EntityRef<Asset> _Asset;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _User;
		
		private EntityRef<Status> _Status;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onticket_idChanging(int value);
    partial void Onticket_idChanged();
    partial void Onticket_createdChanging(System.DateTime value);
    partial void Onticket_createdChanged();
    partial void Onticket_descriptionChanging(string value);
    partial void Onticket_descriptionChanged();
    partial void Onticket_summaryChanging(string value);
    partial void Onticket_summaryChanged();
    partial void Onticket_updatedChanging(System.DateTime value);
    partial void Onticket_updatedChanged();
    partial void Onticket_duedateChanging(System.DateTime value);
    partial void Onticket_duedateChanged();
    partial void Onasset_idChanging(System.Nullable<int> value);
    partial void Onasset_idChanged();
    partial void Onstatus_idChanging(int value);
    partial void Onstatus_idChanged();
    partial void Oncategory_idChanging(int value);
    partial void Oncategory_idChanged();
    partial void Ontechnician_idChanging(System.Nullable<int> value);
    partial void Ontechnician_idChanged();
    partial void Oncustomer_idChanging(System.Nullable<int> value);
    partial void Oncustomer_idChanged();
    partial void Onticket_mlreviewedChanging(bool value);
    partial void Onticket_mlreviewedChanged();
    #endregion
		
		public Ticket()
		{
			this._TicketNotes = new EntitySet<TicketNote>(new Action<TicketNote>(this.attach_TicketNotes), new Action<TicketNote>(this.detach_TicketNotes));
			this._Asset = default(EntityRef<Asset>);
			this._Category = default(EntityRef<Category>);
			this._User = default(EntityRef<User>);
			this._Status = default(EntityRef<Status>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ticket_id
		{
			get
			{
				return this._ticket_id;
			}
			set
			{
				if ((this._ticket_id != value))
				{
					this.Onticket_idChanging(value);
					this.SendPropertyChanging();
					this._ticket_id = value;
					this.SendPropertyChanged("ticket_id");
					this.Onticket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_created", DbType="DateTime2 NOT NULL")]
		public System.DateTime ticket_created
		{
			get
			{
				return this._ticket_created;
			}
			set
			{
				if ((this._ticket_created != value))
				{
					this.Onticket_createdChanging(value);
					this.SendPropertyChanging();
					this._ticket_created = value;
					this.SendPropertyChanged("ticket_created");
					this.Onticket_createdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_description", DbType="VarChar(600) NOT NULL", CanBeNull=false)]
		public string ticket_description
		{
			get
			{
				return this._ticket_description;
			}
			set
			{
				if ((this._ticket_description != value))
				{
					this.Onticket_descriptionChanging(value);
					this.SendPropertyChanging();
					this._ticket_description = value;
					this.SendPropertyChanged("ticket_description");
					this.Onticket_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_summary", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string ticket_summary
		{
			get
			{
				return this._ticket_summary;
			}
			set
			{
				if ((this._ticket_summary != value))
				{
					this.Onticket_summaryChanging(value);
					this.SendPropertyChanging();
					this._ticket_summary = value;
					this.SendPropertyChanged("ticket_summary");
					this.Onticket_summaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_updated", DbType="DateTime2 NOT NULL")]
		public System.DateTime ticket_updated
		{
			get
			{
				return this._ticket_updated;
			}
			set
			{
				if ((this._ticket_updated != value))
				{
					this.Onticket_updatedChanging(value);
					this.SendPropertyChanging();
					this._ticket_updated = value;
					this.SendPropertyChanged("ticket_updated");
					this.Onticket_updatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_duedate", DbType="DateTime2 NOT NULL")]
		public System.DateTime ticket_duedate
		{
			get
			{
				return this._ticket_duedate;
			}
			set
			{
				if ((this._ticket_duedate != value))
				{
					this.Onticket_duedateChanging(value);
					this.SendPropertyChanging();
					this._ticket_duedate = value;
					this.SendPropertyChanged("ticket_duedate");
					this.Onticket_duedateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_asset_id", DbType="Int")]
		public System.Nullable<int> asset_id
		{
			get
			{
				return this._asset_id;
			}
			set
			{
				if ((this._asset_id != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onasset_idChanging(value);
					this.SendPropertyChanging();
					this._asset_id = value;
					this.SendPropertyChanged("asset_id");
					this.Onasset_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status_id", DbType="Int NOT NULL")]
		public int status_id
		{
			get
			{
				return this._status_id;
			}
			set
			{
				if ((this._status_id != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstatus_idChanging(value);
					this.SendPropertyChanging();
					this._status_id = value;
					this.SendPropertyChanged("status_id");
					this.Onstatus_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int NOT NULL")]
		public int category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_technician_id", DbType="Int")]
		public System.Nullable<int> technician_id
		{
			get
			{
				return this._technician_id;
			}
			set
			{
				if ((this._technician_id != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontechnician_idChanging(value);
					this.SendPropertyChanging();
					this._technician_id = value;
					this.SendPropertyChanged("technician_id");
					this.Ontechnician_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_id", DbType="Int")]
		public System.Nullable<int> customer_id
		{
			get
			{
				return this._customer_id;
			}
			set
			{
				if ((this._customer_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncustomer_idChanging(value);
					this.SendPropertyChanging();
					this._customer_id = value;
					this.SendPropertyChanged("customer_id");
					this.Oncustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_mlreviewed", DbType="Bit NOT NULL")]
		public bool ticket_mlreviewed
		{
			get
			{
				return this._ticket_mlreviewed;
			}
			set
			{
				if ((this._ticket_mlreviewed != value))
				{
					this.Onticket_mlreviewedChanging(value);
					this.SendPropertyChanging();
					this._ticket_mlreviewed = value;
					this.SendPropertyChanged("ticket_mlreviewed");
					this.Onticket_mlreviewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_TicketNote", Storage="_TicketNotes", ThisKey="ticket_id", OtherKey="ticket_id")]
		public EntitySet<TicketNote> TicketNotes
		{
			get
			{
				return this._TicketNotes;
			}
			set
			{
				this._TicketNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Ticket", Storage="_Asset", ThisKey="asset_id", OtherKey="asset_id", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._asset_id = value.asset_id;
					}
					else
					{
						this._asset_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Ticket", Storage="_Category", ThisKey="category_id", OtherKey="category_id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._category_id = value.category_id;
					}
					else
					{
						this._category_id = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ticket", Storage="_User", ThisKey="customer_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._customer_id = value.user_id;
					}
					else
					{
						this._customer_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Ticket", Storage="_Status", ThisKey="status_id", OtherKey="status_id", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._status_id = value.status_id;
					}
					else
					{
						this._status_id = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ticket1", Storage="_User1", ThisKey="technician_id", OtherKey="user_id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Tickets1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Tickets1.Add(this);
						this._technician_id = value.user_id;
					}
					else
					{
						this._technician_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketNotes(TicketNote entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_TicketNotes(TicketNote entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketNote")]
	public partial class TicketNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _note_created;
		
		private System.DateTime _note_updated;
		
		private string _note_description;
		
		private bool _note_isresolution;
		
		private int _ticketnote_id;
		
		private int _user_id;
		
		private int _ticket_id;
		
		private EntityRef<Ticket> _Ticket;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onnote_createdChanging(System.DateTime value);
    partial void Onnote_createdChanged();
    partial void Onnote_updatedChanging(System.DateTime value);
    partial void Onnote_updatedChanged();
    partial void Onnote_descriptionChanging(string value);
    partial void Onnote_descriptionChanged();
    partial void Onnote_isresolutionChanging(bool value);
    partial void Onnote_isresolutionChanged();
    partial void Onticketnote_idChanging(int value);
    partial void Onticketnote_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onticket_idChanging(int value);
    partial void Onticket_idChanged();
    #endregion
		
		public TicketNote()
		{
			this._Ticket = default(EntityRef<Ticket>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note_created", DbType="DateTime2 NOT NULL")]
		public System.DateTime note_created
		{
			get
			{
				return this._note_created;
			}
			set
			{
				if ((this._note_created != value))
				{
					this.Onnote_createdChanging(value);
					this.SendPropertyChanging();
					this._note_created = value;
					this.SendPropertyChanged("note_created");
					this.Onnote_createdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note_updated", DbType="DateTime2 NOT NULL")]
		public System.DateTime note_updated
		{
			get
			{
				return this._note_updated;
			}
			set
			{
				if ((this._note_updated != value))
				{
					this.Onnote_updatedChanging(value);
					this.SendPropertyChanging();
					this._note_updated = value;
					this.SendPropertyChanged("note_updated");
					this.Onnote_updatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note_description", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string note_description
		{
			get
			{
				return this._note_description;
			}
			set
			{
				if ((this._note_description != value))
				{
					this.Onnote_descriptionChanging(value);
					this.SendPropertyChanging();
					this._note_description = value;
					this.SendPropertyChanged("note_description");
					this.Onnote_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note_isresolution", DbType="Bit NOT NULL")]
		public bool note_isresolution
		{
			get
			{
				return this._note_isresolution;
			}
			set
			{
				if ((this._note_isresolution != value))
				{
					this.Onnote_isresolutionChanging(value);
					this.SendPropertyChanging();
					this._note_isresolution = value;
					this.SendPropertyChanged("note_isresolution");
					this.Onnote_isresolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticketnote_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ticketnote_id
		{
			get
			{
				return this._ticketnote_id;
			}
			set
			{
				if ((this._ticketnote_id != value))
				{
					this.Onticketnote_idChanging(value);
					this.SendPropertyChanging();
					this._ticketnote_id = value;
					this.SendPropertyChanged("ticketnote_id");
					this.Onticketnote_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ticket_id
		{
			get
			{
				return this._ticket_id;
			}
			set
			{
				if ((this._ticket_id != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onticket_idChanging(value);
					this.SendPropertyChanging();
					this._ticket_id = value;
					this.SendPropertyChanged("ticket_id");
					this.Onticket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_TicketNote", Storage="_Ticket", ThisKey="ticket_id", OtherKey="ticket_id", IsForeignKey=true)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.TicketNotes.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.TicketNotes.Add(this);
						this._ticket_id = value.ticket_id;
					}
					else
					{
						this._ticket_id = default(int);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TicketNote", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TicketNotes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TicketNotes.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
